
***********************
2020-01-31 02:47:47
***********************

Command--Translate 

Parameters--
 File Name--standard_vector_difference_true-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i2(_n1 + 1)=i2(_n1) + 1,i2(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x4(_n2 + 1)=x4(_n2) + 1,x4(0)=x
 Closed Form Solution
_n2 + x

***********************
2020-01-31 02:49:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))
 Strategy--Direct
Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",500)
	_s.add(Not(_N1 >= 5))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",500)
	_s.add(Not(_N2 >= 5))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


System try to prove 
ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(a1 == a)
	_s.add(c1 == c)
	_s.add(b1 == b)
	_s.add(i1 == _N1)
	_s.add(x1 == _N2)
	_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1,_x2) == d1array4(_x1,_x2,_N2))))
	_s.add(main == 0)
	_s.add(ForAll([_x2,_x1,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(_x1,_x2,_n1 + 1) == If(And(((_x1)==(c)),((_x2)==(_n1))),((d1array2(a,_n1,_n1))-(d1array2(b,_n1,_n1))),d1array2(_x1,_x2,_n1)))))
	_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array2(_x1,_x2,0) == d1array(_x1,_x2))))
	_s.add(_N1 >= 5)
	_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
	_s.add(Or(_N1==0,_N1 - 1 < 5))
	_s.add(ForAll([_x2,_x1,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(_x1,_x2,_n2 + 1) == d1array4(_x1,_x2,_n2))))
	_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array4(_x1,_x2,0) == d1array2(_x1,_x2,_N1))))
	_s.add(_N2 >= 5)
	_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 5)))
	_s.add(Or(_N2==0,_N2 - 1 < 5))
	_s.add(_N1>=0)
	_s.add(_N2>=0)
	_s.add(Not(ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


***********************
2020-01-31 02:50:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n2],Implies(_n2>=0,((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_k1=Int('_k1')
	_k2=Int('_k2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",500)
	_s.add(Not(_N1 >= 100000))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_k1=Int('_k1')
	_k2=Int('_k2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",500)
	_s.add(Not(_N2 >= 100000))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


System try to prove 
ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	a=Const('a',arraySort)
	main=Int('main')
	c=Const('c',arraySort)
	b=Const('b',arraySort)
	i1=Int('i1')
	_N1=Const('_N1',IntSort())
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	a1=Const('a1',arraySort)
	_N2=Const('_N2',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_n2=Int('_n2')
	b1=Const('b1',arraySort)
	_n1=Int('_n1')
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	c1=Const('c1',arraySort)
	x1=Int('x1')
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_k1=Int('_k1')
	_k2=Int('_k2')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(a1 == a)
	_s.add(c1 == c)
	_s.add(b1 == b)
	_s.add(i1 == _N1)
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a,_x2) == d1array4(a,_x2,_N2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(c,_x2) == d1array4(c,_x2,_N2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(b,_x2) == d1array4(b,_x2,_N2))))
	_s.add(main == 0)
	_s.add(x1 == _N2)
	_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a,_x2,_n1 + 1) == d1array2(a,_x2,_n1))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(c,_n1,_n1 + 1) == ((d1array2(a,_n1,_n1))-(d1array2(b,_n1,_n1))))))
	_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(b,_x2,_n1 + 1) == d1array2(b,_x2,_n1))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a,_x2,0) == d1array(a,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(c,_x2,0) == d1array(c,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b,_x2,0) == d1array(b,_x2))))
	_s.add(_N1 >= 100000)
	_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
	_s.add(Or(_N1==0,_N1 - 1 < 100000))
	_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a,_x2,_n2 + 1) == d1array4(a,_x2,_n2))))
	_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(c,_x2,_n2 + 1) == d1array4(c,_x2,_n2))))
	_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(b,_x2,_n2 + 1) == d1array4(b,_x2,_n2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a,_x2,0) == d1array2(a,_x2,_N1))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(c,_x2,0) == d1array2(c,_x2,_N1))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b,_x2,0) == d1array2(b,_x2,_N1))))
	_s.add(_N2 >= 100000)
	_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
	_s.add(Or(_N2==0,_N2 - 1 < 100000))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a,_x2,_N1) == d1array(a,_x2))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(c,_n1,_N1) == ((d1array(a,_n1))-(d1array(b,_n1))))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b,_x2,_N1) == d1array(b,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a,_x2,_N2) == d1array(a,_x2))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(c,_n1,_N2) == ((d1array(a,_n1))-(d1array(b,_n1))))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b,_x2,_N2) == d1array(b,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a,_x2,_N1) == d1array(a,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a,_x2,_N1) == d1array2(a,_x2,_N1))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(c,_n1,_N1) == ((d1array(a,_n1))-(d1array(b,_n1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(c,_n1,_N1) == ((d1array2(a,_n1,_N1))-(d1array2(b,_n1,_N1))))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b,_x2,_N1) == d1array(b,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b,_x2,_N1) == d1array2(b,_x2,_N1))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a,_x2,_N2) == d1array(a,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a,_x2,_N2) == d1array4(a,_x2,_N2))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(c,_n1,_N2) == ((d1array(a,_n1))-(d1array(b,_n1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(c,_n1,_N2) == ((d1array4(a,_n1,_N2))-(d1array4(b,_n1,_N2))))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b,_x2,_N2) == d1array(b,_x2))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b,_x2,_N2) == d1array4(b,_x2,_N2))))
	_s.add(a1 == a)
	_s.add(c1 == c)
	_s.add(b1 == b)
	_s.add(_k1>=0)
	_s.add(_k2>=0)
	_s.add(_N1>=0)
	_s.add(_N2>=0)
	_s.add(Not(ForAll([_n2],Implies(And(_n2<_N2,_n2>=0),((d1array4(c,_n2,_N2))==(((d1array4(a,_n2,_N2))-(d1array4(b,_n2,_N2)))))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp~(mp(mp(asserted(ForAll(_n1,
                             Implies(_n1 >= 0,
                                     d1array4(c, _n1, _N2) ==
                                     d1array4(a, _n1, _N2) -
                                     d1array4(b, _n1, _N2)))),
             quant-intro(trans(monotonicity(monotonicity(rewrite(d1array4(a,
                                        Var(0),
                                        _N2) -
                                        d1array4(b,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2)),
                                        (d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) -
                                        d1array4(b,
                                        Var(0),
                                        _N2)) ==
                                        (d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2))),
                                        Implies(Var(0) >= 0,
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) -
                                        d1array4(b,
                                        Var(0),
                                        _N2)) ==
                                        Implies(Var(0) >= 0,
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2))),
                               rewrite(Implies(Var(0) >= 0,
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2)) ==
                                       Or(Not(Var(0) >= 0),
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2))),
                               Implies(Var(0) >= 0,
                                       d1array4(c,
                                        Var(0),
                                        _N2) ==
                                       d1array4(a,
                                        Var(0),
                                        _N2) -
                                       d1array4(b,
                                        Var(0),
                                        _N2)) ==
                               Or(Not(Var(0) >= 0),
                                  d1array4(c, Var(0), _N2) ==
                                  d1array4(a, Var(0), _N2) +
                                  -1*
                                  d1array4(b, Var(0), _N2))),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        d1array4(c,
                                        _n1,
                                        _N2) ==
                                        d1array4(a,
                                        _n1,
                                        _N2) -
                                        d1array4(b,
                                        _n1,
                                        _N2)))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    d1array4(c, _n1, _N2) ==
                                    d1array4(a, _n1, _N2) +
                                    -1*d1array4(b, _n1, _N2))))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       d1array4(c, _n1, _N2) ==
                       d1array4(a, _n1, _N2) +
                       -1*d1array4(b, _n1, _N2)))),
          quant-intro(monotonicity(rewrite((d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2)) ==
                                        (d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(c,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        Var(0),
                                        _N2) ==
                                        0)),
                                   Or(Not(Var(0) >= 0),
                                      d1array4(c,
                                        Var(0),
                                        _N2) ==
                                      d1array4(a,
                                        Var(0),
                                        _N2) +
                                      -1*
                                      d1array4(b,
                                        Var(0),
                                        _N2)) ==
                                   Or(Not(Var(0) >= 0),
                                      d1array4(a,
                                        Var(0),
                                        _N2) +
                                      -1*
                                      d1array4(c,
                                        Var(0),
                                        _N2) +
                                      -1*
                                      d1array4(b,
                                        Var(0),
                                        _N2) ==
                                      0)),
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array4(c, _n1, _N2) ==
                                 d1array4(a, _n1, _N2) +
                                 -1*d1array4(b, _n1, _N2)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array4(a, _n1, _N2) +
                                 -1*d1array4(c, _n1, _N2) +
                                 -1*d1array4(b, _n1, _N2) ==
                                 0)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array4(a, _n1, _N2) +
                    -1*d1array4(c, _n1, _N2) +
                    -1*d1array4(b, _n1, _N2) ==
                    0))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), _N2) +
                         -1*d1array4(c, Var(0), _N2) +
                         -1*d1array4(b, Var(0), _N2) ==
                         0),
                      Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), _N2) +
                         -1*d1array4(c, Var(0), _N2) +
                         -1*d1array4(b, Var(0), _N2) ==
                         0))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array4(a, _n1, _N2) +
                           -1*d1array4(c, _n1, _N2) +
                           -1*d1array4(b, _n1, _N2) ==
                           0)),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array4(a, _n1, _N2) +
                           -1*d1array4(c, _n1, _N2) +
                           -1*d1array4(b, _n1, _N2) ==
..., mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array4(a, _n1, _N2) +
                               -1*d1array4(c, _n1, _N2) +
                               -1*d1array4(b, _n1, _N2) ==
                               0))),
                 Or(Not(_n2!0 >= 0),
                    d1array4(a, _n2!0, _N2) +
                    -1*d1array4(c, _n2!0, _N2) +
                    -1*d1array4(b, _n2!0, _N2) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(iff-true(and-elim(not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n2,
                                        Implies(And(_n2 <
                                        _N2,
                                        _n2 >= 0),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(a,
                                        _n2,
                                        _N2) -
                                        d1array4(b,
                                        _n2,
                                        _N2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... < ...,
                                        ... >= ...) ==
                                        And(Not(...),
                                        ... >= ...)),
                                        monotonicity(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        (d1array4(...,
                                        ...,
                                        ...) ==
                                        ... - ...) ==
                                        (d1array4(...,
                                        ...,
                                        ...) ==
                                        ... + ...)),
                                        Implies(And(... <
                                        ...,
                                        ... >= ...),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        ... - ...) ==
                                        Implies(And(Not(...),
                                        ... >= ...),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        ... + ...)),
                                        rewrite(Implies(And(Not(...),
                                        ... >= ...),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        ... + ...) ==
                                        Or(Not(And(..., ...)),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        ... + ...)),
                                        Implies(And(Var(0) <
                                        _N2,
                                        Var(0) >= 0),
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) -
                                        d1array4(...,
                                        ...,
                                        ...)) ==
                                        Or(Not(And(Not(...),
                                        ... >= ...)),
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) +
                                        ...*...)),
                                        (ForAll(_n2,
                                        Implies(And(_n2 <
                                        _N2,
                                        _n2 >= 0),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) -
                                        d1array4(...,
                                        ...,
                                        ...)))) ==
                                        (ForAll(_n2,
                                        Or(Not(And(Not(...),
                                        ... >= ...)),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) +
                                        ...*...)))),
                                        Not(ForAll(_n2,
                                        Implies(And(_n2 <
                                        _N2,
                                        _n2 >= 0),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) -
                                        d1array4(...,
                                        ...,
                                        ...)))) ==
                                        Not(ForAll(_n2,
                                        Or(Not(And(Not(...),
                                        ... >= ...)),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(...,
                                        ...,
                                        ...) +
                                        ...*...)))),
                                        Not(ForAll(_n2,
                                        Or(Not(And(Not(_N2 <=
                                        _n2),
                                        _n2 >= 0)),
                                        d1array4(c,
                                        _n2,
                                        _N2) ==
                                        d1array4(a,
                                        _n2,
                                        _N2) +
                                        -1*
                                        d1array4(b,
                                        _n2,
                                        _N2))))),
                                        monotonicity(quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        And(Not(... <= ...),
                                        Var(0) >= 0) ==
                                        And(Not(... <= ...),
                                        Var(0) >= 0)),
                                        Not(And(Not(... <=
                                        ...),
                                        Var(0) >= 0)) ==
                                        Not(And(Not(... <=
                                        ...),
                                        Var(0) >= 0))),
                                        rewrite((d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(...,
                                        ...,
                                        ...)) ==
                                        (d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(...,
                                        ...,
                                        ...) +
                                        -1*
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        0)),
                                        Or(Not(And(Not(... <=
                                        ...),
                                        Var(0) >= 0)),
                                        d1array4(c,
                                        Var(0),
                                        _N2) ==
                                        d1array4(a,
                                        Var(0),
                                        _N2) +
                                        -1*
                                        d1array4(...,
                                        ...,
                                        ...)) ==
                                        Or(Not(And(Not(... <=
                                        ...),
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


correctnessWitness 
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
<default>standard_vector_difference_true-unreach-call_ground.i</default>
</key>
<key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
<key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
<key attr.name="namedValue" attr.type="string" for="node" id="named"/>
<key attr.name="nodeType" attr.type="string" for="node" id="nodetype">
<default>path</default>
</key><key attr.name="isFrontierNode" attr.type="boolean" for="node" id="frontier"><default>false</default></key>
<key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
<default>false</default>
</key>
<key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
<default>false</default>
</key>
<key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
<default>false</default></key><key attr.name="isLoopHead" attr.type="boolean" for="node" id="loopHead">
<default>false</default></key><key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
<key attr.name="threadId" attr.type="string" for="edge" id="threadId"/>
<key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
<key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
<key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
<key attr.name="specification" attr.type="string" for="graph" id="specification"/>
<key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/>
<key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
<key attr.name="producer" attr.type="string" for="graph" id="producer"/>
<key attr.name="sourcecode" attr.type="string" for="edge" id="sourcecode"/>
<key attr.name="startline" attr.type="int" for="edge" id="startline"/>
<key attr.name="endline" attr.type="int" for="edge" id="endline"/>
<key attr.name="lineColSet" attr.type="string" for="edge" id="lineCols"/>
<key attr.name="control" attr.type="string" for="edge" id="control"/>
<key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
<key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
<key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
<key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/><key attr.name="predecessor" attr.type="string" for="edge" id="predecessor"/>
<key attr.name="successor" attr.type="string" for="edge" id="successor"/>
<key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
<graph edgedefault="directed">
<data key="witness-type">correctness_witness</data>
<data key="sourcecodelang">C</data><data key="producer">VIAP</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )
</data><data key="programfile">standard_vector_difference_true-unreach-call_ground.i</data>
<data key="programhash">c667e699724f4e9e94cf018d10bdd3f281a5d1a6</data>
<data key="memorymodel">precise</data>
<data key="architecture">32bit</data>
<node id="N0">
<data key="entry">true</data>
</node>
<edge id="E0" source="N0" target="N1"></edge>

<node id="N1">
<data key="invariant">1</data>
<data key="invariant.scope">main</data>
</node>

</graph>
</graphml>

:13:2: Illegal character '@'
***********************
2020-01-31 02:57:27
***********************

Command--Translate 

Parameters--
 File Name--test.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

***********************
2020-01-31 03:03:05
***********************

Command--Translate 

Parameters--
 File Name--test.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

***********************
2020-01-31 03:12:27
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 10:09:35
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 12:08:21
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 12:15:03
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 12:20:32
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 12:40:00
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:10:48
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:19:36
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:20:33
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:26:10
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:28:09
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:40:05
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:42:24
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:53:43
***********************

Command--Translate 

Parameters--
 File Name--test.i
expr2stringMom() takes exactly 2 arguments (1 given)
***********************
2020-01-31 13:56:04
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:57:07
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 13:58:58
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:12:10
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:14:07
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:17:09
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:22:36
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:26:07
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:26:57
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:28:50
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:30:27
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 14:35:08
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 17:42:02
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 17:58:34
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:07:35
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:08:33
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:13:37
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:17:40
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:21:42
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:22:26
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 18:59:41
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 19:17:24
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 19:18:44
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 19:19:51
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 19:25:47
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:01:01
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:03:38
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:10:40
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:26:06
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:28:50
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:30:30
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:34:23
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:35:45
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:52:37
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-01-31 20:54:26
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 11:03:34
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-01 11:06:12
***********************

Command--Translate 

Parameters--
 File Name--test1.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=n

Closed form solution return by sympy 
2*n

Original Axoims 
n3(_n1 + 1)=n3(_n1) + 1,n3(0)=n
 Closed Form Solution
2*_n1

Equation Pass to sympy
T(n+1)-(2*n + T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n**2 + x

Original Axoims 
x3(_n1 + 1)=2*_n1 + x3(_n1) + 1,x3(0)=x
 Closed Form Solution
_n1**2 + x

***********************
2020-02-01 11:23:38
***********************

Command--Translate 

Parameters--
 File Name--test1.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=n

Closed form solution return by sympy 
2*n

Original Axoims 
n3(_n1 + 1)=n3(_n1) + 1,n3(0)=n
 Closed Form Solution
2*_n1

Equation Pass to sympy
T(n+1)-(2*n + T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n**2 + x

Original Axoims 
x3(_n1 + 1)=2*_n1 + x3(_n1) + 1,x3(0)=x
 Closed Form Solution
_n1**2 + x

***********************
2020-02-01 13:46:39
***********************

Command--Translate 

Parameters--
 File Name--test1.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=n

Closed form solution return by sympy 
2*n

Original Axoims 
n3(_n1 + 1)=n3(_n1) + 1,n3(0)=n
 Closed Form Solution
2*_n1

Equation Pass to sympy
T(n+1)-(2*n + T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n**2 + x

Original Axoims 
x3(_n1 + 1)=2*_n1 + x3(_n1) + 1,x3(0)=x
 Closed Form Solution
_n1**2 + x

***********************
2020-02-01 13:48:52
***********************

Command--Translate 

Parameters--
 File Name--test.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=y

Closed form solution return by sympy 
n + y

Original Axoims 
y3(_n1 + 1)=y3(_n1) + 1,y3(0)=y
 Closed Form Solution
_n1 + y

***********************
2020-02-01 13:50:40
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 13:51:14
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 14:21:29
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 14:31:01
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 17:03:43
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 17:22:19
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:19:42
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:28:20
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:31:02
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:32:01
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:36:12
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:42:04
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:45:44
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:47:54
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 18:48:52
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 19:02:56
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:07:48
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:08:44
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:11:56
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:23:13
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:26:20
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:29:34
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:32:09
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:33:45
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:40:01
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:43:37
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:47:01
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:48:38
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:51:08
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:52:57
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 20:57:03
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:09:07
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:17:32
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:18:37
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:24:56
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:26:15
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:33:35
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:39:53
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:49:30
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 21:52:20
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-01 22:02:42
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 11:09:49
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 11:15:19
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 12:42:52
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 12:45:24
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 13:17:09
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 13:17:48
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 13:29:35
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 13:35:11
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 21:34:24
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 22:23:56
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 22:55:21
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 22:55:53
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 22:56:44
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 23:06:22
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-02-23 23:07:27
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:15:22
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:16:17
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:17:43
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:27:50
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:38:50
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:42:13
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:43:55
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:47:19
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:48:41
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:49:18
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:50:35
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:55:22
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-23 23:57:01
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-24 00:05:29
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-24 00:08:13
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-24 00:09:06
***********************

Command--Translate 

Parameters--
 File Name--test1.i

***********************
2020-02-24 00:10:25
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 00:18:04
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 16:09:32
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 16:29:04
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 16:29:55
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 16:41:54
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 16:50:22
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 17:12:18
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 18:14:32
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 18:23:12
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 21:48:02
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 22:54:08
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 22:59:27
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 23:04:21
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 23:28:48
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 23:53:19
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-16 23:54:39
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:15:22
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:23:03
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:23:41
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:27:15
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:32:28
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:33:36
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:36:10
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 00:37:48
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 11:27:35
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 11:28:34
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 17:39:49
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 17:44:56
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 17:45:37
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 18:35:04
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 18:35:53
***********************

Command--Translate 

Parameters--
 File Name--test.i

***********************
2020-05-17 20:51:23
***********************

Command--Translate 

Parameters--
 File Name--test.i
