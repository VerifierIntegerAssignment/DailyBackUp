Program Body
{
  int break_1_flag;
  break_1_flag = 0;
  int x;
  int n;
  int y;
  int m;
  while (x < n)
  {
    while ((y < m) && (break_1_flag == 0))
    {
      break_1_flag = 0;
      if (__VERIFIER_nondet_int() > 0)
      {
        break_1_flag = 1;
      }

      if (break_1_flag == 0)
      {
        y = y + 1;
      }

    }

    x = x + 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ y:int x:int m:int break_1_flag:int n:int}

Output in normal notation:
1. Frame axioms:
m1 = m
n1 = n

2. Output equations:
y1 = y7(_N2)
x1 = (_N2+x)
break_1_flag1 = break_1_flag7(_N2)

3. Other axioms:
y5((_n1+1),_n2) = ite((ite((__VERIFIER_nondet_int2(_n1,_n2)>0),1,0)==0),(y5(_n1,_n2)+1),y5(_n1,_n2))
break_1_flag5((_n1+1),_n2) = ite((__VERIFIER_nondet_int2(_n1,_n2)>0),1,0)
y5(0,_n2) = y7(_n2)
break_1_flag5(0,_n2) = break_1_flag7(_n2)
((y5(_N1(_n2),_n2)>=m) or (break_1_flag5(_N1(_n2),_n2)!=0))
(_n1<_N1(_n2)) -> ((y5(_n1,_n2)<m) and (break_1_flag5(_n1,_n2)==0))
y7((_n2+1)) = y5(_N1(_n2),_n2)
break_1_flag7((_n2+1)) = break_1_flag5(_N1(_n2),_n2)
y7(0) = y
break_1_flag7(0) = 0
(_N2>=(n-x))
(_n2<_N2) -> ((_n2+x)<n)

4. Assumption :

5. Assertion :
VIAP_STANDARD_OUTPUT_True
